
name: "OFR_FlowNet"


layer {
  name: "imgs"
  type: "ImageLSTMData"
  top: "img0_nomean_resize"
  top: "img1_nomean_resize"
  top: "cont_label"
#  top: "input_label"
  top: "target_label"
  include { phase: TRAIN }
  transform_param {
    # Scale to 0..1 range
    scale: 0.003921569
    crop_size: 384
    mirror: true
    fix_crop: true    
    mean_value: 105
    mean_value: 110
    mean_value: 114.8
  }

  image_data_param {
    source: "../train_lstm_18-4-flow.txt"
    new_height: 409
    new_width: 512

    # e.g. 10 streams of 16 timestamps. stream1(16)-stream2(16)-stream3(16)...stream10(16)
    # Batch size is 160=10*16
    # Eeach stream (of 16 timestamps) must have the same labels!! since it belongs to the same sequence
    # Each stream (sequences) get unrolled to the LSTM
    batch_size: 72 
    #shuffle: true
  }
}

layer {
  name: "imgs"
  type: "ImageLSTMData"
  top: "img0_nomean_resize"
  top: "img1_nomean_resize"
  top: "cont_label"
#  top: "input_label"
  top: "target_label"
  include { phase: TEST }
  transform_param {
    # Scale to 0..1 range
    scale: 0.003921569
    crop_size: 384
    mirror: true
    fix_crop: true    
    mean_value: 105
    mean_value: 110
    mean_value: 114.8
  }

  image_data_param {
    source: "../val_lstm_18-4-flow.txt"
    new_height: 409
    new_width: 512

    # e.g. 10 streams of 16 timestamps. stream1(16)-stream2(16)-stream3(16)...stream10(16)
    # Batch size is 160=10*16
    # Eeach stream (of 16 timestamps) must have the same labels!! since it belongs to the same sequence
    # Each stream (sequences) get unrolled to the LSTM
    batch_size: 72 
    #shuffle: true
  }
}

#layer {
#  name: "silence_layer"
#  type: "Silence"
#  bottom: "cont_label"
#  include: { phase: TRAIN }
#  include: { phase: TEST }
#}


#layer {
#	type: "Split"
#	name: "split1"
#	bottom: "imgs"
#	top: "img0_nomean_resize"
#	top: "img1_nomean_resize"
#}

#=================================================================
layer {
  name: "Concat1"
  type: "Concat"
  bottom: "img0_nomean_resize"
  bottom: "img1_nomean_resize"  
  top: "input"
  concat_param {
    axis: 1
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "input"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 2
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2"
  top: "conv3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "conv3"
  top: "conv3_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU4"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv4"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU5"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "conv4"
  top: "conv4_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU6"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv5"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU7"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "conv5"
  top: "conv5_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU8"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv6"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU9"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
  relu_param {
    negative_slope: 0.1
  }
}
layer {
  name: "conv6_1"
  type: "Convolution"
  bottom: "conv6"
  top: "conv6_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 1024
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
    engine: CUDNN
  }
}
layer {
  name: "ReLU10"
  type: "ReLU"
  bottom: "conv6_1"
  top: "conv6_1"
  relu_param {
    negative_slope: 0.1
  }
}

#------------------------------------------------------
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "conv6_1"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    bias_filler {
      type: "constant"
      value: 0.0001
    }
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.1
  }
}


#------------------------------------------------------
#-------------------------------------------------------------
# Reshaping for input to LSTM

layer{
  name: "fc7-reshape"
  type: "Reshape"
  bottom: "fc6"
  top: "fc7-reshape"
  reshape_param{
    shape{
      dim: 18	 # Number of timestamps = batch length
      dim: -1    # Number of streams in the batch
      dim: 4096  # LSTM time unit data 
    }
  }
  include: { phase: TEST}
  include: { phase: TRAIN}
}

layer{
  name: "cont_label-reshape"
  type: "Reshape"
  bottom: "cont_label"
  top: "cont_label-reshape"
  reshape_param{
    shape{
      dim: 18	# Labels for each time stamp. Zero means begining ofa new sequence
      dim: -1	# .. and for each stream in the batch
    }
  }
  include: { phase: TEST }
  include: { phase: TRAIN}
}

layer{
  name: "target_label-reshape"
  type: "Reshape"
  bottom: "target_label"
  top: "target_label-reshape"
  reshape_param{
    shape{
      dim: 18
      dim: -1
    }
  }
  include: { phase: TEST }
  include: { phase: TRAIN }
}

#-------------------------------------------------------------

layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "fc7-reshape"
  bottom: "cont_label-reshape"
  top: "lstm1"
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#layer {
#  name: "drop-lstm2"
#  type: "Dropout"
#  bottom: "lstm1"
#  top: "drop-lstm2"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}

#--------------------------------------------------------------
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm1"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    # Set number of output to guarantee that class 101 is included
    num_output: 101
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target_label-reshape"
  top: "entropy_loss"

  include { phase: TRAIN }
  include { phase: TEST }
  loss_weight: 1
  loss_param {
    #ignore_label: 0 
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "softmax"
  type: "Softmax"
  bottom: "predict"
  top: "softmax"
  include { phase: TEST }
  softmax_param {
    axis:  2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "softmax"
  bottom: "target_label-reshape"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    #ignore_label: 0 
    top_k: 1
  }
}

