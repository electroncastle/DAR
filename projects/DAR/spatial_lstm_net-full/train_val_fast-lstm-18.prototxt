name: "vgg16_lstm"


layer {
  name: "data"
  type: "ImageLSTMData"
  top: "data"
  top: "cont_label"
#  top: "input_label"
  top: "target_label"
  include { phase: TRAIN }
  transform_param {
    fix_crop: true
    mirror: true
    crop_size: 224
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }
  image_data_param {
    source: "../train_lstm_18-4.txt"
    new_height: 256
    new_width: 320

    # e.g. 10 streams of 16 timestamps. stream1(16)-stream2(16)-stream3(16)...stream10(16)
    # Batch size is 160=10*16
    # Eeach stream (of 16 timestamps) must have the same labels!! since it belongs to the same sequence
    # Each stream (sequences) get unrolled to the LSTM
    batch_size: 72 # 18*4
    #shuffle: true
  }
}

layer {
  name: "data"
  type: "ImageLSTMData"
  top: "data"
  top: "cont_label"
#  top: "input_label"
  top: "target_label"
  include { phase: TEST }
  transform_param {
    fix_crop: true
    crop_size: 224
    mean_value: 104
    mean_value: 117
    mean_value: 123
  }

  image_data_param {
    source: "../val_lstm_18-4.txt"
    new_height: 256
    new_width: 320

    # e.g. 10 streams of 16 timestamps. stream1(16)-stream2(16)-stream3(16)...stream10(16)
    # Batch size is 160=10*16
    # Eeach stream (of 16 timestamps) must have the same labels!! since it belongs to the same sequence
    # Each stream (sequences) get unrolled to the LSTM
    batch_size: 72 
    #shuffle: true
  }
}


#---------------------------------------------------------------
#---------------------------------------------------------------
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.9
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.9
  }
}
#-------------------------------------------------------------
# Reshaping for input to LSTM

layer{
  name: "fc7-reshape"
  type: "Reshape"
  bottom: "fc7"
  top: "fc7-reshape"
  reshape_param{
    shape{
      dim: 18	 # Number of timestamps = batch length
      dim: -1    # Number of streams in the batch
      dim: 4096  # LSTM time unit data 
    }
  }
  include: { phase: TEST}
  include: { phase: TRAIN}
}

layer{
  name: "cont_label-reshape"
  type: "Reshape"
  bottom: "cont_label"
  top: "cont_label-reshape"
  reshape_param{
    shape{
      dim: 18	# Labels for each time stamp. Zero means begining ofa new sequence
      dim: -1	# .. and for each stream in the batch
    }
  }
  include: { phase: TEST }
  include: { phase: TRAIN}
}

layer{
  name: "target_label-reshape"
  type: "Reshape"
  bottom: "target_label"
  top: "target_label-reshape"
  reshape_param{
    shape{
      dim: 18
      dim: -1
    }
  }
  include: { phase: TEST }
  include: { phase: TRAIN }
}

#-------------------------------------------------------------

layer {
  name: "lstm1"
  type: "LSTM"
  bottom: "fc7-reshape"
  bottom: "cont_label-reshape"
  top: "lstm1"
  recurrent_param {
    num_output: 256
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#layer {
  #name: "lstm2"
  #type: "LSTM"
  #bottom: "lstm1"
  #bottom: "cont_label-reshape"
  #top: "lstm2"
  #recurrent_param {
    #num_output: 512
    #weight_filler {
      #type: "uniform"
      #min: -0.08
      #max: 0.08
    #}
    #bias_filler {
      #type: "constant"
      #value: 0
    #}
  #}
#}

layer {
  name: "drop-lstm1"
  type: "Dropout"
  bottom: "lstm1"
  top: "drop-lstm1"
  dropout_param {
    dropout_ratio: 0.9
  }
}

#--------------------------------------------------------------
layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "drop-lstm1"
  top: "predict"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    # Set number of output to guarantee that class 101 is included
    num_output: 101
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}
layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target_label-reshape"
  top: "entropy_loss"

  include { phase: TRAIN }
  include { phase: TEST }
  loss_weight: 1
  loss_param {
    # Ignore 0 since it is only an indicator of the frame sequence start
    # Since this isn't captioning, all clips will have the same number of frames, so the 
    # need to predict the pad label is unnecessary.  However, the 0 label cannot be removed
    # because it is a required sequence indicator.
    #ignore_label: 0 
  }
  softmax_param {
    axis: 2
  }
}
layer {
  name: "softmax"
  type: "Softmax"
  bottom: "predict"
  top: "softmax"
  include { phase: TEST }
  softmax_param {
    axis:  2
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "softmax"
  bottom: "target_label-reshape"
  top: "accuracy"
  include { phase: TEST }
  accuracy_param {
    axis: 2
    #ignore_label: 0 
    top_k: 1
  }
}

